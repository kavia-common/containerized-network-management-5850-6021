{"is_source_file": true, "format": "Python", "description": "This file is a Flask-based backend for device management in a network monitoring application. It provides CRUD operations for devices, simulates reachability status, and handles API routes for device status and health checks.", "external_files": ["flask", "flask_cors", "os", "uuid", "time", "datetime", "ipaddress", "typing"], "external_methods": ["Flask", "jsonify", "request", "CORS", "os.getenv", "uuid.uuid4", "datetime.now", "ip_address", "time.time"], "published": ["create_app", "app"], "classes": [], "methods": [{"name": "create_app()", "description": "Factory function to create and configure the Flask application with in-memory storage, CORS, and route definitions.", "scope": "", "scopeKind": ""}, {"name": "health()", "description": "Health check endpoint to verify backend health status.", "scope": "create_app", "scopeKind": "function"}, {"name": "list_devices()", "description": "Endpoint to get all devices, with optional filtering and sorting.", "scope": "create_app", "scopeKind": "function"}, {"name": "create_device()", "description": "Endpoint to create a new device with validation and duplicate checks.", "scope": "create_app", "scopeKind": "function"}, {"name": "get_device(device_id: str)", "description": "Retrieve details of a device by ID.", "scope": "create_app", "scopeKind": "function"}, {"name": "update_device(device_id: str)", "description": "Update existing device details, with validation and duplicate IP check.", "scope": "create_app", "scopeKind": "function"}, {"name": "delete_device(device_id: str)", "description": "Delete a device by ID.", "scope": "create_app", "scopeKind": "function"}, {"name": "get_all_status()", "description": "Retrieve current statuses for all devices, utilizing cache.", "scope": "create_app", "scopeKind": "function"}, {"name": "check_status(device_id: str)", "description": "Manual trigger for status check of a specific device.", "scope": "create_app", "scopeKind": "function"}, {"name": "openapi()", "description": "Return a minimal OpenAPI specification for the API endpoints.", "scope": "create_app", "scopeKind": "function"}, {"name": "cache_status(device_id: str, status: str, response_time_ms: Optional[int] = None)", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}, {"name": "bool cached_status_valid(device_id: str)", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}, {"name": "bool has_duplicate_ip(ip: str, exclude_id: Optional[str] = None)", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}, {"name": "str now_iso()", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}, {"name": "(bool,Optional[int]) simulate_reachability(ip: str)", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}, {"name": "(bool,Dict[str,str]) validate_device_payload(payload: Dict[str, Any], require_all: bool = True)", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}, {"name": "bool validate_ip(ip: str)", "scope": "create_app", "scopeKind": "function", "description": "unavailable"}], "calls": ["jsonify", "request.get_json", "os.getenv", "uuid.uuid4", "datetime.now", "ip_address", "time.time", "simulate_reachability"], "search-terms": ["Flask", "device CRUD", "simulate_reachability", "in-memory storage", "device status cache", "API routes"], "state": 2, "file_id": 7, "knowledge_revision": 18, "git_revision": "2dc29e0d3890107706f776e04be9ecbefe27e07c", "revision_history": [{"15": ""}, {"18": "2dc29e0d3890107706f776e04be9ecbefe27e07c"}], "ctags": [{"_type": "tag", "name": "app", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^app = create_app()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "cache_status", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def cache_status(device_id: str, status: str, response_time_ms: Optional[int] = None):$/", "file": true, "language": "Python", "kind": "function", "signature": "(device_id: str, status: str, response_time_ms: Optional[int] = None)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "cached_status_valid", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def cached_status_valid(device_id: str) -> bool:$/", "file": true, "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(device_id: str)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "check_status", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def check_status(device_id: str):$/", "file": true, "language": "Python", "kind": "function", "signature": "(device_id: str)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "create_app", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^def create_app():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "create_device", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def create_device():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "delete_device", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def delete_device(device_id: str):$/", "file": true, "language": "Python", "kind": "function", "signature": "(device_id: str)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "get_all_status", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def get_all_status():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "get_device", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def get_device(device_id: str):$/", "file": true, "language": "Python", "kind": "function", "signature": "(device_id: str)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "has_duplicate_ip", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def has_duplicate_ip(ip: str, exclude_id: Optional[str] = None) -> bool:$/", "file": true, "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(ip: str, exclude_id: Optional[str] = None)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "health", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def health():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "list_devices", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def list_devices():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "now_iso", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def now_iso() -> str:$/", "file": true, "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "()", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "openapi", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def openapi():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "port", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    port = int(os.getenv(\"PORT\", \"3001\"))$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "simulate_reachability", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def simulate_reachability(ip: str) -> (bool, Optional[int]):$/", "file": true, "language": "Python", "typeref": "typename:(bool,Optional[int])", "kind": "function", "signature": "(ip: str)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "update_device", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def update_device(device_id: str):$/", "file": true, "language": "Python", "kind": "function", "signature": "(device_id: str)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "validate_device_payload", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def validate_device_payload(payload: Dict[str, Any], require_all: bool = True) -> (bool, Dic/", "file": true, "language": "Python", "typeref": "typename:(bool,Dict[str,str])", "kind": "function", "signature": "(payload: Dict[str, Any], require_all: bool = True)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "validate_ip", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def validate_ip(ip: str) -> bool:$/", "file": true, "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(ip: str)", "scope": "create_app", "scopeKind": "function"}], "hash": "44fcf7da267419c2887c61626fbe1aa3", "format-version": 4, "code-base-name": "Backend", "filename": "Backend/app.py", "fields": [{"name": "app = create_app()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "port = int(os.getenv(\"PORT\", \"3001\"))", "scope": "", "scopeKind": "", "description": "unavailable"}]}