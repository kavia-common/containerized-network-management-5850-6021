{"is_source_file": true, "format": "Python", "description": "This file defines a Flask-based REST API server for managing network devices. It includes endpoints for creating, retrieving, updating, deleting devices, and checking their online status with simulated reachability. The code features in-memory storage, Swagger/OpenAPI documentation setup, and status caching.", "external_files": ["flask", "flask_cors", "flask_smorest"], "external_methods": ["os.getenv", "uuid.uuid4", "datetime.now", "ip_address"], "published": ["create_app", "app"], "classes": [], "methods": [{"name": "create_app()", "description": "Factory function to create and configure the Flask application with endpoints and in-memory storage.", "scope": "", "scopeKind": ""}, {"name": "health()", "description": "Health check endpoint to verify backend availability.", "scope": "create_app", "scopeKind": "function"}, {"name": "list_devices()", "description": "Retrieve all devices with optional filtering and sorting.", "scope": "create_app", "scopeKind": "function"}, {"name": "create_device()", "description": "Create a new device with validation and duplicate IP check.", "scope": "create_app", "scopeKind": "function"}, {"name": "get_device(device_id: str)", "description": "Retrieve device details by ID.", "scope": "create_app", "scopeKind": "function"}, {"name": "update_device(device_id: str)", "description": "Update existing device information.", "scope": "create_app", "scopeKind": "function"}, {"name": "delete_device(device_id: str)", "description": "Remove a device from the system.", "scope": "create_app", "scopeKind": "function"}, {"name": "get_all_status()", "description": "Get statuses of all devices, with caching.", "scope": "create_app", "scopeKind": "function"}, {"name": "check_status(device_id: str)", "description": "Manually trigger a status check for a specific device.", "scope": "create_app", "scopeKind": "function"}, {"name": "(bool,Optional[int]) simulate_reachability(ip: str)", "description": "Simulates network reachability of an IP address.", "scope": "create_app", "scopeKind": "function"}, {"name": "bool validate_ip(ip: str)", "description": "Validates IP address format.", "scope": "create_app", "scopeKind": "function"}, {"name": "bool has_duplicate_ip(ip: str, exclude_id: Optional[str] = None)", "description": "Checks for duplicate IP addresses among devices.", "scope": "create_app", "scopeKind": "function"}, {"name": "(bool,Dict[str,str]) validate_device_payload(payload: Dict[str, Any], require_all: bool = True)", "description": "Validates device creation/update payload.", "scope": "create_app", "scopeKind": "function"}, {"name": "cache_status(device_id: str, status: str, response_time_ms: Optional[int] = None)", "description": "Caches device status information.", "scope": "create_app", "scopeKind": "function"}, {"name": "bool cached_status_valid(device_id: str)", "description": "Checks if cached status is still valid based on TTL.", "scope": "create_app", "scopeKind": "function"}, {"name": "str now_iso()", "description": "Returns current timestamp in ISO format.", "scope": "create_app", "scopeKind": "function"}], "calls": ["os.getenv", "uuid.uuid4", "datetime.now", "ip_address", "simulate_reachability", "validate_ip", "has_duplicate_ip", "validate_device_payload", "cache_status", "cached_status_valid"], "search-terms": ["Flask REST API network device management", "simulate reachability in server", "in-memory device storage Flask", "Swagger OpenAPI Flask setup", "device status caching"], "state": 2, "file_id": 7, "knowledge_revision": 20, "git_revision": "34c73f801e68b4092d4e0a1e88389d23adce7644", "revision_history": [{"15": ""}, {"18": "2dc29e0d3890107706f776e04be9ecbefe27e07c"}, {"20": "34c73f801e68b4092d4e0a1e88389d23adce7644"}], "ctags": [{"_type": "tag", "name": "Api", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    Api = None  # Will raise at runtime if missing; requirements.txt updated accordingly$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "app", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^app = create_app()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "cache_status", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def cache_status(device_id: str, status: str, response_time_ms: Optional[int] = None):$/", "file": true, "language": "Python", "kind": "function", "signature": "(device_id: str, status: str, response_time_ms: Optional[int] = None)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "cached_status_valid", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def cached_status_valid(device_id: str) -> bool:$/", "file": true, "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(device_id: str)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "check_status", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def check_status(device_id: str):$/", "file": true, "language": "Python", "kind": "function", "signature": "(device_id: str)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "create_app", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^def create_app():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "create_device", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def create_device():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "delete_device", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def delete_device(device_id: str):$/", "file": true, "language": "Python", "kind": "function", "signature": "(device_id: str)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "get_all_status", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def get_all_status():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "get_device", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def get_device(device_id: str):$/", "file": true, "language": "Python", "kind": "function", "signature": "(device_id: str)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "has_duplicate_ip", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def has_duplicate_ip(ip: str, exclude_id: Optional[str] = None) -> bool:$/", "file": true, "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(ip: str, exclude_id: Optional[str] = None)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "health", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def health():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "list_devices", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def list_devices():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "now_iso", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def now_iso() -> str:$/", "file": true, "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "()", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "port", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    port = int(os.getenv(\"PORT\", \"3001\"))$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "simulate_reachability", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def simulate_reachability(ip: str) -> (bool, Optional[int]):$/", "file": true, "language": "Python", "typeref": "typename:(bool,Optional[int])", "kind": "function", "signature": "(ip: str)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "update_device", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def update_device(device_id: str):$/", "file": true, "language": "Python", "kind": "function", "signature": "(device_id: str)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "validate_device_payload", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def validate_device_payload(payload: Dict[str, Any], require_all: bool = True) -> (bool, Dic/", "file": true, "language": "Python", "typeref": "typename:(bool,Dict[str,str])", "kind": "function", "signature": "(payload: Dict[str, Any], require_all: bool = True)", "scope": "create_app", "scopeKind": "function"}, {"_type": "tag", "name": "validate_ip", "path": "/home/kavia/workspace/code-generation/containerized-network-management-5850-6021/Backend/app.py", "pattern": "/^    def validate_ip(ip: str) -> bool:$/", "file": true, "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(ip: str)", "scope": "create_app", "scopeKind": "function"}], "hash": "4c69b8b346ea1c1395318ba50ef039b2", "format-version": 4, "code-base-name": "Backend", "filename": "Backend/app.py", "fields": [{"name": "Api = None  # Will raise at runtime if missing; requirements.txt updated accordingly", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "app = create_app()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "port = int(os.getenv(\"PORT\", \"3001\"))", "scope": "", "scopeKind": "", "description": "unavailable"}]}